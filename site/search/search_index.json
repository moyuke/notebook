{"config":{"lang":["ja"],"separator":"[\\s\\-\uff0c\u3002]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"DB/DB%E5%90%8E%E7%AF%87/","title":"DB\u540e\u7bc7","text":""},{"location":"DB/DB%E5%90%8E%E7%AF%87/#_1","title":"\u7269\u7406\u5b58\u50a8","text":"<ul> <li> <p>\u5206\u7c7b\uff1a</p> </li> <li> <p>\u6613\u5931\u5b58\u50a8 volatile storage </p> </li> <li>\u975e\u6613\u5931\u5b58\u50a8 non-volatile storage </li> <li></li> <li> <p>NVM\uff08non-volatile memory\uff09: \u6389\u7535\u4e0d\u4e22</p> </li> <li> <p>primary storage: Fastest media but volatile (cache, main memory).</p> </li> <li> <p>secondary storage: next level in hierarchy, non-volatile, moderately fast access time</p> <p>also called on-line storage </p> <p>E.g. flash memory, magnetic disks</p> </li> <li> <p>tertiary storage: lowest level in hierarchy, non-volatile, slow access time</p> <p>also called off-line storage </p> <p>E.g. magnetic tape, optical storage</p> </li> <li> <p>\u78c1\u76d8 magnetic disks</p> </li> <li> <p>tracks(\u78c1\u9053)  sectors(\u6247\u533a)</p> </li> <li> <p>Access Time \u8bbf\u95ee\u65f6\u95f4\uff0c\u6beb\u79d2\u7ea7</p> <ul> <li>Seek Time \u5bfb\u9053\u65f6\u95f4\uff1a\u627e\u5230\u5bf9\u5e94\u78c1\u9053</li> <li>Rotational latency \u65cb\u8f6c\u5ef6\u8fdf\uff1a\u8f6c\u5230\u5bf9\u5e94\u6247\u533a</li> </ul> </li> <li> <p>Data-transfer rate \u6570\u636e\u4f20\u8f93\u7387</p> </li> <li> <p>\u6570\u636e\u5e93\u4f20\u8f93\u4ee5block\u4e3a\u5355\u4f4d </p> </li> <li> <p>\u8bbf\u95ee\u6a21\u5f0f\uff1a</p> <ul> <li> <p>Sequential access pattern(\u987a\u5e8f\u8bbf\u95ee\u6a21\u5f0f)   Successive requests are for successive disk blocks   Disk seek required only for first block</p> </li> <li> <p>Random access pattern\uff08\u968f\u673a\u8bbf\u95ee\u6a21\u5f0f\uff09   Each access requires a seek   Transfer rates are low since a lot of time is wasted in seeks </p> </li> </ul> <p>\u5c3d\u91cf\u8f6c\u5316\u4e3a\u987a\u5e8f\u8bbf\u95ee\u6a21\u5f0f </p> <ul> <li> <p>I/O operations per second (IOPS \uff0c\u6bcf\u79d2I/O\u64cd\u4f5c\u6570)</p> </li> <li> <p>\u8861\u91cf\u78c1\u76d8\u8bbf\u95ee\u901f\u5ea6</p> </li> <li>Number of random block reads that a disk can support per second     50 to 200 IOPS on current generation magnetic disks</li> </ul> </li> <li> <p>Mean time to failure (MTTF\uff0c\u5e73\u5747\u6545\u969c\u65f6\u95f4)</p> <ul> <li>\u8861\u91cf\u78c1\u76d8\u53ef\u9760\u6027</li> <li>the average time the disk is expected to run continuously without any failure</li> </ul> </li> <li> <p>\u78c1\u76d8\u5757\u8bbf\u95ee\u7684\u4f18\u5316</p> </li> <li> <p>Buffering \u7f13\u5b58: in-memory buffer to cache disk blocks</p> </li> <li> <p>Read-ahead(Prefetch): Read extra blocks from a track in anticipation that they will be requested soon</p> </li> <li> <p>Disk-arm-scheduling algorithms re-order block requests so that disk arm movement is minimized </p> </li> <li> <p>File organization\uff1a\u5c06\u788e\u7247\u5316\u7684\u6587\u4ef6\u91cd\u65b0\u6574\u7406     Allocate blocks of a file in as contiguous a manner as possible     Allocation in units of extents(\u76d8\u533a\uff09</p> </li> <li> <p>Nonvolatile write buffers \uff08\u975e\u6613\u5931\u6027\u5199\u7f13\u5b58\uff09</p> <p>speed up disk writes by writing blocks to a non-volatile RAM buffer immediately</p> </li> <li> <p>Log disk\uff08\u65e5\u5fd7\u78c1\u76d8\uff09</p> <p>a disk devoted to writing a sequential log of block updates Used exactly like nonvolatile RAM</p> </li> <li> <p>Flash Storage</p> </li> <li> <p>NAND flash</p> <ul> <li>Page can only be written once   Must be erased to allow rewrite</li> </ul> </li> <li>SSD(Solid State Disks) <ul> <li></li> <li>SSD\u6bd4\u78c1\u76d8\u5feb\u767e\u500d\uff0c\u78c1\u76d8\u80fd\u8017\u9ad8\uff08\u673a\u68b0\u8fd0\u52a8\uff09\u66f4\u65b0\u4e3a\u5373\u5e2d\u5199\u5165</li> </ul> </li> <li>Flash storage \u4e2d\u7684\u5730\u5740\u6620\u5c04\u6f02\u79fb\uff0c\u5df2\u8fbe\u6210\u78e8\u635f\u5747\u8861\uff08wear leveling)</li> <li></li> <li> <p>\u5bf9\u4e8e\u5927\u6570\u636e\uff0c\u70ed\u6570\u636e\uff08\u5e38\u8bbf\u95ee\uff09\u653e\u5728SSD\uff0c\u51b7\u6570\u636e\u653e\u5728\u78c1\u76d8\u91cc</p> </li> <li> <p>NVM\uff0c\u53c8\u79f0Storage Class Memory</p> </li> <li> <p></p> </li> <li>Persistence\u53ef\u4ee5\u770b\u51fa\u662f\u5426\u6613\u5931</li> <li> <p>NVM\u548cSSD\u4e0e\u786c\u76d8\u4e0d\u540c\uff0c\u7528\u5b57\u8282\u5bfb\u5740</p> </li> <li> <p>\u968f\u5802\u6d4b\u8bd5\uff1a</p> </li> <li> <p>Which physical storage media is non-volatile?</p> <p>\u591a\u9009\u9898 (1 \u5206) </p> <p>A.cache</p> <p>B.main memory</p> <p>C.flash memory</p> <p>D.magnetic disk</p> <p>E.SSD(State Solid Disk)</p> <p>F.magnetic tapes</p> <p>G.optical disk</p> <p>\u6b63\u786e\u7b54\u6848: C D E F G</p> </li> <li> <p>Which physical storage medias belong to the secondary storage? </p> <p>\u591a\u9009\u9898 (1 \u5206)</p> <p>A.cache</p> <p>B.main memory </p> <p>C.flash memory</p> <p>D.SSD(Solid State Disk)</p> <p>E.magnetic disk</p> <p>F.magnetic tapes</p> <p>G.optical disk</p> <p>\u6b63\u786e\u7b54\u6848: C D E</p> </li> <li> <p>Which term represents the time that the disk controller takes to reposition the disk arm over the correct track.</p> <p>\u5355\u9009\u9898 (1 \u5206)</p> <p>A.access time</p> <p>B.seek time</p> <p>C.rotational latency</p> <p>D.data-transfer rate </p> <p>\u6b63\u786e\u7b54\u6848: B</p> </li> <li> <p>What is the right approach to  optimizing  data access of disks?</p> <p>\u591a\u9009\u9898 (1 \u5206)</p> <p>A.Buffering</p> <p>B.Read-ahead</p> <p>C.defragment the file system</p> <p>D.Non-volatile write buffers</p> <p>E.Log disk</p> <p>\u6b63\u786e\u7b54\u6848: A B C D E</p> </li> <li> <p>MTTF means    1   (\u6ce8\u610f\uff1a\u6bcf\u4e2a\u5355\u8bcd\u9996\u5b57\u6bcd\u5927\u5199).</p> <p>\u586b\u7a7a\u9898 (1 \u5206) (\u8bf7\u6309\u9898\u76ee\u4e2d\u7684\u7a7a\u7f3a\u987a\u5e8f\u4f9d\u6b21\u586b\u5199\u7b54\u6848)</p> <p>\u6b63\u786e\u7b54\u6848: Mean Time To Failure</p> </li> <li> <p>IOPS  means     1   (\u6ce8\u610f\uff1a\u6bcf\u4e2a\u5355\u8bcd\u9996\u5b57\u6bcd\u5927\u5199).</p> <p>\u586b\u7a7a\u9898 (1 \u5206) (\u8bf7\u6309\u9898\u76ee\u4e2d\u7684\u7a7a\u7f3a\u987a\u5e8f\u4f9d\u6b21\u586b\u5199\u7b54\u6848)</p> <p>\u6b63\u786e\u7b54\u6848: I/O Operations Per Second</p> </li> </ul>"},{"location":"DB/DB%E5%90%8E%E7%AF%87/#_2","title":"\u6570\u636e\u5b58\u50a8\u7ed3\u6784","text":"<ul> <li>\u6570\u636e\u5e93\u6587\u4ef6\u5b58\u5728\u78c1\u76d8\u91cc\uff0c\u6587\u4ef6\u7531\u8bb0\u5f55(record)\u7ec4\u6210\uff0crecord\u7531\u5404\u4e2a\u5b57\u6bb5(field)\u7ec4\u6210</li> <li>\u5b9a\u957f\u8bb0\u5f55(Fixed-Length Record)\uff0c\u53ef\u4ee5\u8ba1\u7b97\u6bcf\u4e2ablock\u53ef\u4ee5\u653e\u591a\u5c11\u8bb0\u5f55</li> <li>\u5b58record i\uff1a\u82e5\u957fn byte\uff0c\u4ecen*(i-1) byte\u5f00\u59cb</li> <li>\u5220\u9664\uff1a\u4e0d\u79fb\u52a8 record\uff0c\u8bb0\u4e3a\u7a7a\u8bb0\u5f55<ul> <li>\u7a7a\u8bb0\u5f55\u8bbe\u6307\u9488\u6307\u4e0b\u4e00\u4e2a\u7a7a\u7684record</li> <li>\u5934\u90e8\u52a0\u4e0aheader\u6307\u5411\u7b2c\u4e00\u6761\u7a7a\u8bb0\u5f55</li> </ul> </li> <li>\u4e0d\u5b9a\u957f\u8bb0\u5f55(Variable-Length Record)</li> <li>\u539f\u56e0\uff1a\u6709\u4e0d\u5b9a\u957f\u5b57\u7b26\u4e32\uff0c\u6709\u7a7a\u5b57\u6bb5</li> <li>\u65b9\u6cd5\uff1a\u4e0d\u5b9a\u957f\u7684\u5168\u653e\u540e\u9762\uff0c\u7528(offset,length)\u8bb0\u5f55\u4f4d\u7f6e\u548c\u957f\u5ea6</li> <li></li> <li>Null bitmap\uff1a\u6709\u51e0\u4e2a\u5c5e\u6027\u5c31\u6709\u51e0\u4f4d\uff0c0\u8868\u793a\u975e\u7a7a\uff0c1\u8868\u793a\u7a7a</li> <li></li> <li>\u63d2\u5165\uff1a\u6307\u9488+\u957f\u5ea6\u5b58\u8bb0\u5f55\u4f4d\u7f6e\uff0c\u5728free space\u4ece\u540e\u5f80\u524d\u63d2\u5165</li> <li> <p>\u5220\u9664\uff1a\u76f8\u5bf9\u5730\u5740\uff0cblock_num + index</p> </li> <li> <p>Record\u7ec4\u7ec7\u89c4\u5219\uff1a</p> </li> <li>\u5806\uff1a<ul> <li></li> <li>\u7ef4\u62a4\u7a7a\u95f2\u5757\u7684map\uff0c\u8bb0\u5f55\u7a7a\u95f2\u7a0b\u5ea6\uff1a7\u5373\u215e\u7684\u7a7a\u95f2</li> </ul> </li> <li>\u987a\u5e8f Sequential<ul> <li>\u63d2\u5165\uff1a\u63d2\u5230\u4e2d\u95f4\u4f1a\u5bfc\u81f4\u540e\u9762\u7684\u8bb0\u5f55\u5168\u4f53\u540e\u79fb\uff0c\u56e0\u6b64\u76f4\u63a5\u653e\u5728\u6700\u540e\uff0c\u901a\u8fc7\u6307\u9488\u4e32\u8054</li> <li>\u6bcf\u4e2a\u4e00\u6bb5\u65f6\u95f4\u6309\u987a\u5e8f\u91cd\u6574\uff08\u514b\u670d\u788e\u7247\u5316\uff09</li> </ul> </li> <li>B+\u6811</li> <li>\u54c8\u5e0c</li> <li>\u5b58\u653e\u65b9\u5f0f\uff1a</li> <li>\u6309\u884c\u5b58\u653e</li> <li>\u6309\u5217\u5b58\u653e\uff1acache\u547d\u4e2d\u7387\u9ad8</li> <li>\u7f13\u5b58\u7ba1\u7406 Buffer manager</li> <li>\u7f13\u5b58\u66ff\u6362\uff1a<ul> <li>LRU\u7b56\u7565\uff08Least Recently Used\uff09\u6700\u8fd1\u6700\u5c11\u7528\u5230</li> <li></li> <li>\u5728for\u5faa\u73af\u7b49\u573a\u666f\uff0cLRU\u53ef\u80fd\u662f\u4e00\u79cd\u574f\u7b56\u7565</li> </ul> </li> <li>\u82e5\u8bbf\u95ee\u7684block\u4e0d\u5728\u7f13\u5b58\uff0c\u8bfb\u51fa\u5230\u7f13\u51b2\u533a</li> <li> <p>\u8bbf\u95ee\u8bf7\u6c42\u65f6\uff0c\u9489\u5728(pin)\u7f13\u51b2\u533a\uff0c\u8bf7\u6c42\u4e3a\u8bfb\u65f6\u52a0\u5171\u4eab\u9501\uff0c\u5199\u65f6\u52a0exclusive lock</p> </li> <li> <p>\u968f\u5802\u6d4b\u8bd5\uff1a</p> </li> <li> <p>What is contained in the header of slotted page? </p> <p>\u591a\u9009\u9898 (1 \u5206)</p> <p>A.number of record entries</p> <p>B.end location of free space in the block</p> <p>C.location of each record</p> <p>D.size of each record</p> <p>E.primary key of each record</p> <p>\u6b63\u786e\u7b54\u6848: A B C D</p> </li> <li> <p>What kind file organization is suitable for applications that require sequential processing of the entire file? </p> <p>\u5355\u9009\u9898 (1 \u5206)</p> <p>A.heap file organization</p> <p>B.sequential file organization</p> <p>C.multitable clustering file organization</p> <p>D.hash file organization</p> <p>\u6b63\u786e\u7b54\u6848: B</p> </li> <li> <p>Which statement is incorrect?</p> <p>\u591a\u9009\u9898 (1 \u5206)</p> <p>A.For heap file organization, records can be placed anywhere in the file where there is free space.</p> <p>B.Database system seeks to minimize the number of block transfers between the disk and memory. </p> <p>C.If the needed block is not in the buffer, the buffer manager will replace some other block, if required, to make space for the new block.</p> <p>D.LRU is the most suitable replacement strategy for buffer manager in any cases.</p> <p>\u6b63\u786e\u7b54\u6848: D</p> </li> <li> <p>For the buffer manager, there are following assumptions:</p> <p>\u2022 There are 4 buffer pages.</p> <p>\u2022 Initially the buffer is empty occupied.</p> <p>\u2022 The data access sequence is 1,2,3,4,5,4,3,2,1,3,5</p> <p>According to the LRU replacement strategy, there are    1    times replacements occurred,  and the data item    2    is the least recently used after completing the above data access sequence.</p> <p>\u586b\u7a7a\u9898 (1 \u5206) (\u8bf7\u6309\u9898\u76ee\u4e2d\u7684\u7a7a\u7f3a\u987a\u5e8f\u4f9d\u6b21\u586b\u5199\u7b54\u6848)</p> <p>\u6b63\u786e\u7b54\u6848:</p> <p>1\uff1a3</p> <p>2\uff1a2</p> </li> </ul>"},{"location":"DB/DB%E5%90%8E%E7%AF%87/#indexing","title":"\u7d22\u5f15Indexing","text":"<ul> <li> <p>Form\uff1asearch key - pointer</p> </li> <li> <p>Query type</p> </li> <li> <p>Point query: records with a specified value in the attribute</p> </li> <li> <p>Range query: records with an attribute value falling in a specified range of values.</p> </li> <li> <p>Primary index \u4e3b\u7d22\u5f15</p> </li> <li> <p></p> </li> <li> <p>candidate key\u552f\u4e00\u60c5\u51b5\u4e0b\u7528\u8d77\u6765\u65b9\u4fbf</p> </li> <li> <p>Secondary Indices</p> </li> <li> <p></p> </li> <li>\u4e0d\u552f\u4e00\uff0c\u4e2d\u95f4\u7684\u6307\u9488\u6307\u5411\u591a\u4e2a\u76ee\u6807</li> <li></li> <li> <p>Dense index\uff1aIndex record appears for every search-key value in the file. </p> </li> <li> <p></p> </li> <li> <p>Sparse index\uff1acontains index records for only some search-key values.</p> </li> <li> <p></p> </li> <li> <p></p> </li> <li> <p>Multilevel Index\uff08\u591a\u7ea7\u7d22\u5f15\uff09</p> </li> <li> <p>\u7d22\u5f15\u7684\u7d22\u5f15</p> </li> <li> <p></p> </li> <li> <p>B+ Tree Index</p> </li> <li> <p>\u6bcf\u4e2a\u8282\u70b9\u90fd\u548cblock\u5927\u5c0f\u4e00\u6837</p> </li> <li></li> <li>\u53f6\u5b50\u7ed3\u70b9\u5c31\u662f\u672b\u7ea7\u7d22\u5f15\uff0c\u4e4b\u95f4\u7528\u6307\u9488\u76f8\u8fde\uff0c\u4f7f\u8fde\u7eed</li> <li>\u9ad8\u5ea6\uff1a$ log_{n}(k)&lt;= height &lt;=log_{n/2}(k/2)+1 $\uff0c\u5411\u4e0a\u53d6\u6574\uff08\u6839\u8282\u70b9\u6700\u5c0f\u4e24\u53c9\uff09</li> <li>\u5927\u5c0f\uff1a\u6700\u5927\uff1a\u534a\u6ee1\uff0c\u6700\u5c0f\uff1a\u5168\u6ee1</li> <li>\u548cADS\u4e0d\u540c\uff1a\u6bcf\u4e2a\u8282\u70b9\u5bb9\u91cf\u76f8\u7b49\uff0c\u975e\u53f6\u5b50\u548c\u53f6\u5b50\u4e00\u6837\uff08ADS\u91cc\u975e\u53f6\u5b50\u6700\u591a\u9636\u6570-1\uff09<ul> <li>\u4e5f\u5c31\u662f\u8bf4\u4e2d\u95f4\u7ed3\u70b9\u7684\u5206\u53c9\u6570\u6bd4\u53f6\u5b50\u7ed3\u70b9\u503c\u6570\u591a1</li> </ul> </li> <li> <p>\u4f5c\u7528\uff1a\u53c9\u6570\u591a\uff0c\u5c42\u6570\u5c11\uff0c\u51cf\u5c11seek&amp;block transfer\u6b21\u6570</p> </li> <li> <p>\u4f30\u8ba1 height &amp; size</p> </li> <li> <p>person( pid char(18) primary key,  </p> <p>\u200b           name char(8), </p> <p>\u200b           age smallint, \u200b             address char(40)); </p> <p>Block size : 4K 1000000 persons</p> </li> <li> <p>Records per block =  4096/(18+8+2+40) =60.235=60</p> <ul> <li>record \u5927\u5c0f\u6839\u636e\u5404\u4e2a\u5c5e\u6027\u7c7b\u578b\u7b97</li> </ul> </li> <li> <p>blocks for storing 1M persons= 1000000/60 =16667</p> <ul> <li>\u8ba1\u7b97block\u6570</li> </ul> </li> <li> <p>B+ tree n(fan-out)  = (4096-4)/(18+4) +1 = 187</p> <ul> <li>B+\u6811\u4e00\u4e2a\u8282\u70b9\u5c31\u662f\u4e00\u4e2ablock\uff0c\u5b58\u653eM\u4e2a\u503c\u548cM+1\u4e2a\u6307\u9488</li> </ul> <p>\u5373\u4f7f\u662f\u53f6\u5b50\u7ed3\u70b9\uff0c\u4e5f\u591a\u51fa\u4e00\u4e2a\u6307\u5411\u4e0b\u4e00\u4e2a\u53f6\u5b50\u7684\u6307\u9488</p> <p>\u6307\u9488\u6bd4\u503c\u591a\u4e00\u4e2a\uff0c\u6240\u4ee5\u5148-4\uff0c\u540e+1</p> <ul> <li> <p>\u4e00\u4e2a\u7d22\u5f15\u9879=\u7d22\u5f15\u503c+\u6307\u9488(\u5047\u8bbe4byte)=18+4</p> </li> <li> <p>\u6700\u5927187\u53c9\uff0c\u6700\u5c11 n/2 = 94\u53c9</p> </li> <li> <p>\u80fd\u7d22\u5f15\u591a\u5c11\u503c</p> </li> <li> <p>2 levels:  min=2<code>*</code>93 = 186            max= 187'<code>*</code>186 = 34,782</p> </li> <li> <p>3 levels:  min=2<code>*</code>94<code>*</code>93 = 17484        max=187<code>*</code>187<code>*</code>186 = 6,504,234</p> </li> <li> <p>4 levels:  min=2<code>*</code>94<code>*</code>94<code>*</code>93 = 1,643,496</p> <p>\u200b              max=187<code>*</code>187<code>*</code>187<code>*</code>186 = 1,216,291,758</p> </li> <li> <p>\u6613\u5f97\u8fd9\u4e2aB+\u6811\u4e3a3\u5c42</p> </li> </ul> </li> <li> <p>size\uff1a</p> <ul> <li>\u6700\u5c0f\uff08\u5168\u6ee1\uff09100000/186+100000/186/187+1</li> <li>\u6700\u5927\uff08\u534a\u6ee1\uff09100000/93+100000/93/94+1</li> </ul> </li> <li> <p>Bottom-up B+ Tree Build</p> </li> <li> <p></p> </li> <li>fanout = 4\uff0c\u5219\u9636\u6570\u4e3a3</li> <li>\u5148\u6392\u5e8f\uff0c\u6309\u5e8f\u5206\u5757\uff0c\u7136\u540e\u5411\u4e0a\u6784\u5efa</li> <li>\u6784\u5efa\u4e0a\u56feB+\u6811 cost\uff1a1 seek + 9 block transfer</li> <li>\u63d2\u5165\u5927\u91cf\u503c/\u5408\u5e76\u6811\u53ef\u4ee5\u76f4\u63a5\u628a\u53f6\u5b50merge\u5e76\u6392\u5e8f\uff0c\u7136\u540e\u91cd\u5efa</li> <li></li> <li> <p>\u539f\u6811\u7684\u53f6\u5b50\u8bfb\u53d6\uff1a1 seek+6 block transfer</p> </li> <li> <p>Indexing in Main Memory</p> </li> <li> <p>Random access in memory </p> <ul> <li>Much cheaper than on disk/flash, but still expensive compared to cache read</li> <li>Binary search for a key value within a large B+-tree node results in many cache misses</li> <li>Data structures that make best use of cache preferable \u2013 cache conscious</li> </ul> </li> <li>Cache miss<ul> <li>HD\u4ee5block\u4e3a\u5355\u4f4d\u8bfb\u5230buffer\uff0cbuffer\u4ee564byte(\u4f8b)\u4e3a\u5355\u4f4d\u8bfb\u5230cache\uff0c\u5927\u8282\u70b9\u5c31\u4f1a\u8bfb\u4e0d\u5168\uff0c\u67e5\u627e\u7d22\u5f15\u503c\u8fc7\u7a0b\u4e2d\u8bfb\u53d6\u7684cache\u53ea\u6709\u5c0f\u90e8\u5206\u6709\u7528\uff0c\u6ca1\u627e\u5230-&gt;\u4ea7\u751fmiss</li> <li>\u964d\u4f4emiss\uff1a</li> <li>\u5c0f\u8282\u70b9\uff1aB+ trees with small nodes that fit in cache line are preferable to reduce cache misses</li> <li>\u6307\u9488\u548csearch key\u5206\u5f00\u6392</li> <li>\u5efa\u7acb\u4e00\u4e2a\u201c\u8def\u6807\u201d\uff08\u4e00\u68f5\u5c0f\u6811\uff09</li> </ul> </li> <li> <p>Key idea:  </p> <ul> <li>use large node size to optimize disk access, </li> <li>but structure data within a node using a tree with small node size, instead of using an array, to optimize cache access.</li> </ul> </li> <li> <p>LSM tree(Log Structured Merge) \u5199\u4f18\u5316\u7684\u6811\u7ed3\u6784</p> </li> <li> <p></p> </li> <li>Benefits of LSM approach     Inserts are done using only sequential I/O operations \u968f\u673a\u5199-&gt;\u987a\u5e8f\u5199     Leaves are full, avoiding space wastage     Reduced number of I/O operations per record inserted as compared to normal B+-tree (up to some size)</li> <li> <p>Drawback of LSM approach     Queries have to search multiple trees     Entire content of each level copied multiple times</p> </li> <li> <p>LSM-Stepped Merge Index</p> </li> <li> <p></p> </li> <li>\u5185\u5b58\u6ee1\u4e86\u76f4\u63a5\u5199\u5230\u4e0b\u4e00\u5c42\u6765\uff0cdisk\u4e2d\u8fd9\u4e00\u5c42\u6ee1\u4e86\u518dmerge\u5199\u5230\u4e0b\u4e00\u5c42</li> <li>\u5220\u9664\uff1a\u63d2\u5165\u5220\u9664\u6807\u8bb0</li> <li> <p>\u66f4\u65b0\uff1a\u5220\u9664+\u63d2\u5165</p> </li> <li> <p>Buffer Tree</p> </li> <li> <p></p> </li> <li> <p>\u968f\u5802\u6d4b\u8bd5</p> </li> <li> <p>1.Indexing mechanisms are used to speed up access  to desired data.</p> <p>\u5224\u65ad\u9898 (1 \u5206)</p> <p>A.Yes</p> <p>B.No</p> <p>\u6b63\u786e\u7b54\u6848: A</p> </li> <li> <p>2.Range query returns records with an attribute value falling in a specified range of values.</p> <p>\u5224\u65ad\u9898 (1 \u5206)</p> <p>A.Yes</p> <p>B.No</p> <p>\u6b63\u786e\u7b54\u6848: A</p> </li> <li> <p>3.Secondary index is an index whose search key specifies an order same as the sequential order of the file. </p> <p>\u5224\u65ad\u9898 (1 \u5206)</p> <p>A.Yes</p> <p>B.NO</p> <p>\u6b63\u786e\u7b54\u6848: B</p> </li> <li> <p>4.In an dense index, index record appears for every search-key value in the file. </p> <p>\u5224\u65ad\u9898 (1 \u5206)</p> <p>A.Yes</p> <p>B.No</p> <p>\u6b63\u786e\u7b54\u6848: A</p> </li> <li> <p>5.In a B+-tree , all paths from root to leaf are of the same length.</p> <p>\u5224\u65ad\u9898 (1 \u5206)</p> <p>A.Yes</p> <p>B.No</p> <p>\u6b63\u786e\u7b54\u6848: A</p> </li> <li> <p>6.If the root of a B+-tree is not a leaf, it has at least 2 children.</p> <p>\u5224\u65ad\u9898 (1 \u5206)</p> <p>A.Yes </p> <p>B.No</p> <p>\u6b63\u786e\u7b54\u6848: A</p> </li> <li> <p>7.In databases, a node of a B+-tree is generally the same size as a disk block.</p> <p>\u5224\u65ad\u9898 (1 \u5206)</p> <p>A.Yes</p> <p>B.No</p> <p>\u6b63\u786e\u7b54\u6848: A</p> </li> <li> <p>8.The leaf nodes of a B+-tree file organization store records, instead of pointers to records.</p> <p>\u5224\u65ad\u9898 (1 \u5206)</p> <p>A.Yes</p> <p>B.No</p> <p>\u6b63\u786e\u7b54\u6848: A</p> </li> <li> <p>9.Benefits of LSM approach:</p> <p>\u591a\u9009\u9898 (1 \u5206)</p> <p>A.Inserts are done using only sequential I/O operations</p> <p>B.Leave nodes are full, avoiding space wastage</p> <p>C.Reduced number of I/O operations per record inserted as compared to normal B+-tree.</p> <p>D.Queries have to search multiple trees</p> <p>E.Entire content of each level copied multiple times</p> <p>\u6b63\u786e\u7b54\u6848: A B C</p> </li> <li> <p>10.Bitmap indices are useful for queries on multiple attributes,not particularly useful for single attribute queries.</p> <p>\u5224\u65ad\u9898 (1 \u5206)</p> <p>A.Yes</p> <p>B. No</p> <p>\u6b63\u786e\u7b54\u6848: A</p> </li> </ul>"},{"location":"DB/DB%E5%90%8E%E7%AF%87/#query-processing","title":"\u67e5\u8be2\u5904\u7406Query Processing","text":"<ul> <li> <p>Basic Steps in Query Processing</p> </li> <li> <p>Parsing and translation     translate the query into its internal form.  This is then translated into relational algebra.     Parser checks syntax, verifies relations</p> </li> <li>Optimization     Amongst all equivalent evaluation plans choose the one with lowest cost. </li> <li>Evaluation     The query-execution engine takes a query-evaluation plan, executes that plan, and returns the answers to the query.</li> <li></li> <li></li> <li> <p>\u9009\u62e9\u8fd0\u7b97\u5c3d\u91cf\u5148\u505a\uff08\u5f80\u4e0b\u63a8\uff09</p> </li> <li> <p>\u8861\u91cfQuery</p> </li> <li> <p>$ t_s $\uff1anumber of seek</p> </li> <li> <p>$ t_t $\uff1anumber of block transfer(read &amp; write)</p> </li> <li> <p>Cost for b block transfers plus S seeks</p> <p>b *  $ t_t $ + S * $ t_s $</p> </li> <li> <p></p> </li> <li> <p></p> </li> <li> <p></p> </li> <li> <p>\u5bf9select\u7684\u6761\u4ef6\u8fdb\u884c\u6392\u5e8f\uff1a\u5916\u90e8\u6392\u5e8f</p> </li> <li> <p></p> </li> <li></li> <li>\u6027\u80fd\uff1a</li> <li></li> <li>$ (b_r/M) $ \u4e3a\u5f52\u5e76\u6bb5\u6570\uff0c$ log_{M-1}(b_r/M) $ \u4e3a\u8f6e\u6b21\uff0c2br\u4e3a\u6bcf\u6b21\u7684\u4f20\u8f93\u6d88\u8017\uff0c\u6700\u540e\u4e00\u6b21+br\uff0c\u5982\u679c\u8981\u5199\u56de\u78c1\u76d8\u5c31+2br\u3002</li> <li></li> <li>\u5916\u90e8\u6392\u5e8f\uff08External Merge Sort\uff09 \u4e2d\uff0c\u7ed9\u4e00\u4e2a\u6bb5run\u5206\u914dbb \u5757\uff08\u800c\u4e0d\u662f1\u5757\uff09\u4f5c\u4e3a\u7f13\u51b2\uff0c\u53ef\u4ee5\u51cf\u5c11\u6bcf\u8f6e\u5408\u5e76\uff08merge\uff09\u7684seek\u6b21\u6570\uff0c\u4f46\u4e5f\u53ef\u80fd\u589e\u52a0merge\u7684\u8f6e\u6570\u3002\u5bf9\u4e8e\u786e\u5b9a\u7684\u5173\u7cfb\u5927\u5c0fbr \u548c\u786e\u5b9a\u7684\u5185\u5b58\u5757\u6570M\uff0c\u7406\u8bba\u4e0a\u5e94\u8be5\u6709\u4e00\u4e2a\u6700\u4f73\u7684bb\u53d6\u503c\uff0c\u4f7f\u5f97\u7b97\u6cd5\u4ee3\u4ef7\u6700\u5c0f\u3002</li> <li></li> <li> <p></p> </li> <li> <p>Join Operation</p> </li> <li> <p>Nested-loop join</p> <ul> <li>\u4e24\u91cd\u5faa\u73af</li> <li>\u4ee3\u4ef7\uff1a</li> <li>nr * bs + br   block transfers</li> <li>nr + br  seeks</li> <li>nr\u662f\u8bb0\u5f55\u6570\uff0cblock\u4e2d\u542b\u6709\u591a\u4e2a\u8bb0\u5f55</li> </ul> </li> <li> <p>Block nested-loop join</p> <ul> <li></li> <li>\u4ee3\u4ef7\uff1a</li> <li>Worst case estimate:  br * bs + br  block transfers + 2 * br  seeks     Each block in the inner relation s is read once for each block in the outer relation</li> <li>Best case: br + bs block transfers + 2 seeks.\uff08\u5185\u5b58\u8db3\u591f\u5927\uff0c\u6bcf\u4e2a\u8868\u53ea\u8981\u8fdb\u5165\u5185\u5b58\u4e00\u6b21\uff09</li> <li> <p>\u5c0f\u5173\u7cfb\u4f5c\u4e3a\u5916\u5173\u7cfb\u66f4\u597d</p> </li> <li> <p></p> </li> <li>\u5185\u5b58\u6709M\u5757\u7684\u60c5\u51b5\uff1a\u75591\u5757\u4f5c\u4e3aoutput\u7684\u7f13\u5b58\uff0c\u5916\u5173\u7cfb\u7ed9M-2\u5757\uff0c\u5185\u5173\u7cfb\u53cd\u6b63\u6bcf\u6b21\u8981seek\uff0c\u53ea\u7ed91\u5757\u3002</li> </ul> </li> <li> <p>Indexed nested-loop join</p> <ul> <li></li> <li>\u591a\u5757\u5c31\u662fbr/(M-2)</li> <li>\u5916\u5173\u7cfb\u5c0f(nr\u5c0f)\u7684\u65f6\u5019\u9009\u8fd9\u79cd\u65b9\u6cd5</li> </ul> </li> <li> <p>Merge-join</p> <ul> <li>\u4e24\u4e2a\u5173\u7cfb\u5df2\u7ecf\u6709\u5e8f</li> <li></li> </ul> </li> <li> <p>Hash-join</p> </li> <li></li> </ul>"},{"location":"OOP/OOP%E5%90%8E%E7%AF%87/","title":"C++ \u6587\u4ef6\u548c\u6d41","text":"<p>\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u4eec\u5df2\u7ecf\u4f7f\u7528\u4e86 iostream \u6807\u51c6\u5e93\uff0c\u5b83\u63d0\u4f9b\u4e86 cin \u548c cout \u65b9\u6cd5\u5206\u522b\u7528\u4e8e\u4ece\u6807\u51c6\u8f93\u5165\u8bfb\u53d6\u6d41\u548c\u5411\u6807\u51c6\u8f93\u51fa\u5199\u5165\u6d41\u3002</p> <p>\u672c\u6559\u7a0b\u4ecb\u7ecd\u5982\u4f55\u4ece\u6587\u4ef6\u8bfb\u53d6\u6d41\u548c\u5411\u6587\u4ef6\u5199\u5165\u6d41\u3002\u8fd9\u5c31\u9700\u8981\u7528\u5230 C++ \u4e2d\u53e6\u4e00\u4e2a\u6807\u51c6\u5e93 fstream\uff0c\u5b83\u5b9a\u4e49\u4e86\u4e09\u4e2a\u65b0\u7684\u6570\u636e\u7c7b\u578b\uff1a</p> \u6570\u636e\u7c7b\u578b \u63cf\u8ff0 ofstream \u8be5\u6570\u636e\u7c7b\u578b\u8868\u793a\u8f93\u51fa\u6587\u4ef6\u6d41\uff0c\u7528\u4e8e\u521b\u5efa\u6587\u4ef6\u5e76\u5411\u6587\u4ef6\u5199\u5165\u4fe1\u606f\u3002 ifstream \u8be5\u6570\u636e\u7c7b\u578b\u8868\u793a\u8f93\u5165\u6587\u4ef6\u6d41\uff0c\u7528\u4e8e\u4ece\u6587\u4ef6\u8bfb\u53d6\u4fe1\u606f\u3002 fstream \u8be5\u6570\u636e\u7c7b\u578b\u901a\u5e38\u8868\u793a\u6587\u4ef6\u6d41\uff0c\u4e14\u540c\u65f6\u5177\u6709 ofstream \u548c ifstream \u4e24\u79cd\u529f\u80fd\uff0c\u8fd9\u610f\u5473\u7740\u5b83\u53ef\u4ee5\u521b\u5efa\u6587\u4ef6\uff0c\u5411\u6587\u4ef6\u5199\u5165\u4fe1\u606f\uff0c\u4ece\u6587\u4ef6\u8bfb\u53d6\u4fe1\u606f\u3002 <p>\u8981\u5728 C++ \u4e2d\u8fdb\u884c\u6587\u4ef6\u5904\u7406\uff0c\u5fc5\u987b\u5728 C++ \u6e90\u4ee3\u7801\u6587\u4ef6\u4e2d\u5305\u542b\u5934\u6587\u4ef6  \u548c \u3002"},{"location":"OOP/OOP%E5%90%8E%E7%AF%87/#_1","title":"\u6253\u5f00\u6587\u4ef6","text":"<p>\u5728\u4ece\u6587\u4ef6\u8bfb\u53d6\u4fe1\u606f\u6216\u8005\u5411\u6587\u4ef6\u5199\u5165\u4fe1\u606f\u4e4b\u524d\uff0c\u5fc5\u987b\u5148\u6253\u5f00\u6587\u4ef6\u3002ofstream \u548c fstream \u5bf9\u8c61\u90fd\u53ef\u4ee5\u7528\u6765\u6253\u5f00\u6587\u4ef6\u8fdb\u884c\u5199\u64cd\u4f5c\uff0c\u5982\u679c\u53ea\u9700\u8981\u6253\u5f00\u6587\u4ef6\u8fdb\u884c\u8bfb\u64cd\u4f5c\uff0c\u5219\u4f7f\u7528 ifstream \u5bf9\u8c61\u3002</p> <p>\u4e0b\u9762\u662f open() \u51fd\u6570\u7684\u6807\u51c6\u8bed\u6cd5\uff0copen() \u51fd\u6570\u662f fstream\u3001ifstream \u548c ofstream \u5bf9\u8c61\u7684\u4e00\u4e2a\u6210\u5458\u3002</p> <pre><code>void open(const char *filename, ios::openmode mode);\n</code></pre> <p>\u5728\u8fd9\u91cc\uff0copen() \u6210\u5458\u51fd\u6570\u7684\u7b2c\u4e00\u53c2\u6570\u6307\u5b9a\u8981\u6253\u5f00\u7684\u6587\u4ef6\u7684\u540d\u79f0\u548c\u4f4d\u7f6e\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u5b9a\u4e49\u6587\u4ef6\u88ab\u6253\u5f00\u7684\u6a21\u5f0f\u3002</p> \u6a21\u5f0f\u6807\u5fd7 \u63cf\u8ff0 ios::app \u8ffd\u52a0\u6a21\u5f0f\u3002\u6240\u6709\u5199\u5165\u90fd\u8ffd\u52a0\u5230\u6587\u4ef6\u672b\u5c3e\u3002 ios::ate \u6587\u4ef6\u6253\u5f00\u540e\u5b9a\u4f4d\u5230\u6587\u4ef6\u672b\u5c3e\u3002 ios::in \u6253\u5f00\u6587\u4ef6\u7528\u4e8e\u8bfb\u53d6\u3002 ios::out \u6253\u5f00\u6587\u4ef6\u7528\u4e8e\u5199\u5165\u3002 ios::trunc \u5982\u679c\u8be5\u6587\u4ef6\u5df2\u7ecf\u5b58\u5728\uff0c\u5176\u5185\u5bb9\u5c06\u5728\u6253\u5f00\u6587\u4ef6\u4e4b\u524d\u88ab\u622a\u65ad\uff0c\u5373\u628a\u6587\u4ef6\u957f\u5ea6\u8bbe\u4e3a 0\u3002 <p>\u60a8\u53ef\u4ee5\u628a\u4ee5\u4e0a\u4e24\u79cd\u6216\u4e24\u79cd\u4ee5\u4e0a\u7684\u6a21\u5f0f\u7ed3\u5408\u4f7f\u7528\u3002\u4f8b\u5982\uff0c\u5982\u679c\u60a8\u60f3\u8981\u4ee5\u5199\u5165\u6a21\u5f0f\u6253\u5f00\u6587\u4ef6\uff0c\u5e76\u5e0c\u671b\u622a\u65ad\u6587\u4ef6\uff0c\u4ee5\u9632\u6587\u4ef6\u5df2\u5b58\u5728\uff0c\u90a3\u4e48\u60a8\u53ef\u4ee5\u4f7f\u7528\u4e0b\u9762\u7684\u8bed\u6cd5\uff1a</p> <pre><code>ofstream outfile;\noutfile.open(\"file.dat\", ios::out | ios::trunc );\n</code></pre> <p>\u7c7b\u4f3c\u5730\uff0c\u60a8\u5982\u679c\u60f3\u8981\u6253\u5f00\u4e00\u4e2a\u6587\u4ef6\u7528\u4e8e\u8bfb\u5199\uff0c\u53ef\u4ee5\u4f7f\u7528\u4e0b\u9762\u7684\u8bed\u6cd5\uff1a</p> <pre><code>ifstream  afile;\nafile.open(\"file.dat\", ios::out | ios::in );\n</code></pre>"},{"location":"OOP/OOP%E5%90%8E%E7%AF%87/#_2","title":"\u5173\u95ed\u6587\u4ef6","text":"<p>\u5f53 C++ \u7a0b\u5e8f\u7ec8\u6b62\u65f6\uff0c\u5b83\u4f1a\u81ea\u52a8\u5173\u95ed\u5237\u65b0\u6240\u6709\u6d41\uff0c\u91ca\u653e\u6240\u6709\u5206\u914d\u7684\u5185\u5b58\uff0c\u5e76\u5173\u95ed\u6240\u6709\u6253\u5f00\u7684\u6587\u4ef6\u3002\u4f46\u7a0b\u5e8f\u5458\u5e94\u8be5\u517b\u6210\u4e00\u4e2a\u597d\u4e60\u60ef\uff0c\u5728\u7a0b\u5e8f\u7ec8\u6b62\u524d\u5173\u95ed\u6240\u6709\u6253\u5f00\u7684\u6587\u4ef6\u3002</p> <p>\u4e0b\u9762\u662f close() \u51fd\u6570\u7684\u6807\u51c6\u8bed\u6cd5\uff0cclose() \u51fd\u6570\u662f fstream\u3001ifstream \u548c ofstream \u5bf9\u8c61\u7684\u4e00\u4e2a\u6210\u5458\u3002</p> <pre><code>void close();\n</code></pre>"},{"location":"OOP/OOP%E5%90%8E%E7%AF%87/#_3","title":"\u5199\u5165\u6587\u4ef6","text":"<p>\u5728 C++ \u7f16\u7a0b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u6d41\u63d2\u5165\u8fd0\u7b97\u7b26\uff08 &lt;&lt; \uff09\u5411\u6587\u4ef6\u5199\u5165\u4fe1\u606f\uff0c\u5c31\u50cf\u4f7f\u7528\u8be5\u8fd0\u7b97\u7b26\u8f93\u51fa\u4fe1\u606f\u5230\u5c4f\u5e55\u4e0a\u4e00\u6837\u3002\u552f\u4e00\u4e0d\u540c\u7684\u662f\uff0c\u5728\u8fd9\u91cc\u60a8\u4f7f\u7528\u7684\u662f ofstream \u6216 fstream \u5bf9\u8c61\uff0c\u800c\u4e0d\u662f cout \u5bf9\u8c61\u3002</p>"},{"location":"OOP/OOP%E5%90%8E%E7%AF%87/#_4","title":"\u8bfb\u53d6\u6587\u4ef6","text":"<p>\u5728 C++ \u7f16\u7a0b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u6d41\u63d0\u53d6\u8fd0\u7b97\u7b26\uff08 &gt;&gt; \uff09\u4ece\u6587\u4ef6\u8bfb\u53d6\u4fe1\u606f\uff0c\u5c31\u50cf\u4f7f\u7528\u8be5\u8fd0\u7b97\u7b26\u4ece\u952e\u76d8\u8f93\u5165\u4fe1\u606f\u4e00\u6837\u3002\u552f\u4e00\u4e0d\u540c\u7684\u662f\uff0c\u5728\u8fd9\u91cc\u60a8\u4f7f\u7528\u7684\u662f ifstream \u6216 fstream \u5bf9\u8c61\uff0c\u800c\u4e0d\u662f cin \u5bf9\u8c61\u3002</p>"},{"location":"OOP/OOP%E5%90%8E%E7%AF%87/#_5","title":"\u8bfb\u53d6 &amp; \u5199\u5165\u5b9e\u4f8b","text":"<p>\u4e0b\u9762\u7684 C++ \u7a0b\u5e8f\u4ee5\u8bfb\u5199\u6a21\u5f0f\u6253\u5f00\u4e00\u4e2a\u6587\u4ef6\u3002\u5728\u5411\u6587\u4ef6 afile.dat \u5199\u5165\u7528\u6237\u8f93\u5165\u7684\u4fe1\u606f\u4e4b\u540e\uff0c\u7a0b\u5e8f\u4ece\u6587\u4ef6\u8bfb\u53d6\u4fe1\u606f\uff0c\u5e76\u5c06\u5176\u8f93\u51fa\u5230\u5c4f\u5e55\u4e0a\uff1a</p>"},{"location":"OOP/OOP%E5%90%8E%E7%AF%87/#_6","title":"\u5b9e\u4f8b","text":"<pre><code>#include &lt;fstream&gt;\n#include &lt;iostream&gt;\nusing namespace std;\nint main ()\n{\nchar data[100];\n// \u4ee5\u5199\u6a21\u5f0f\u6253\u5f00\u6587\u4ef6\nofstream outfile;\noutfile.open(\"afile.dat\");\ncout &lt;&lt; \"Writing to the file\" &lt;&lt; endl;\ncout &lt;&lt; \"Enter your name: \"; cin.getline(data, 100);\n// \u5411\u6587\u4ef6\u5199\u5165\u7528\u6237\u8f93\u5165\u7684\u6570\u636e\noutfile &lt;&lt; data &lt;&lt; endl;\ncout &lt;&lt; \"Enter your age: \"; cin &gt;&gt; data;\ncin.ignore();\n// \u518d\u6b21\u5411\u6587\u4ef6\u5199\u5165\u7528\u6237\u8f93\u5165\u7684\u6570\u636e\noutfile &lt;&lt; data &lt;&lt; endl;\n// \u5173\u95ed\u6253\u5f00\u7684\u6587\u4ef6\noutfile.close();\n// \u4ee5\u8bfb\u6a21\u5f0f\u6253\u5f00\u6587\u4ef6\nifstream infile; infile.open(\"afile.dat\"); cout &lt;&lt; \"Reading from the file\" &lt;&lt; endl; infile &gt;&gt; data; // \u5728\u5c4f\u5e55\u4e0a\u5199\u5165\u6570\u636e\ncout &lt;&lt; data &lt;&lt; endl;\n// \u518d\u6b21\u4ece\u6587\u4ef6\u8bfb\u53d6\u6570\u636e\uff0c\u5e76\u663e\u793a\u5b83\ninfile &gt;&gt; data; cout &lt;&lt; data &lt;&lt; endl; // \u5173\u95ed\u6253\u5f00\u7684\u6587\u4ef6\ninfile.close();\nreturn 0;\n}\n</code></pre> <p>\u5f53\u4e0a\u9762\u7684\u4ee3\u7801\u88ab\u7f16\u8bd1\u548c\u6267\u884c\u65f6\uff0c\u5b83\u4f1a\u4ea7\u751f\u4e0b\u5217\u8f93\u5165\u548c\u8f93\u51fa\uff1a</p> <pre><code>$./a.out\nWriting to the file\nEnter your name: Zara\nEnter your age: 9\nReading from the file\nZara\n9\n</code></pre> <p>\u4e0a\u9762\u7684\u5b9e\u4f8b\u4e2d\u4f7f\u7528\u4e86 cin \u5bf9\u8c61\u7684\u9644\u52a0\u51fd\u6570\uff0c\u6bd4\u5982 getline()\u51fd\u6570\u4ece\u5916\u90e8\u8bfb\u53d6\u4e00\u884c\uff0cignore() \u51fd\u6570\u4f1a\u5ffd\u7565\u6389\u4e4b\u524d\u8bfb\u8bed\u53e5\u7559\u4e0b\u7684\u591a\u4f59\u5b57\u7b26\u3002</p>"},{"location":"OOP/OOP%E5%90%8E%E7%AF%87/#_7","title":"\u6587\u4ef6\u4f4d\u7f6e\u6307\u9488","text":"<p>istream \u548c ostream \u90fd\u63d0\u4f9b\u4e86\u7528\u4e8e\u91cd\u65b0\u5b9a\u4f4d\u6587\u4ef6\u4f4d\u7f6e\u6307\u9488\u7684\u6210\u5458\u51fd\u6570\u3002\u8fd9\u4e9b\u6210\u5458\u51fd\u6570\u5305\u62ec\u5173\u4e8e istream \u7684 seekg\uff08\"seek get\"\uff09\u548c\u5173\u4e8e ostream \u7684 seekp\uff08\"seek put\"\uff09\u3002</p> <p>seekg \u548c seekp \u7684\u53c2\u6570\u901a\u5e38\u662f\u4e00\u4e2a\u957f\u6574\u578b\u3002\u7b2c\u4e8c\u4e2a\u53c2\u6570\u53ef\u4ee5\u7528\u4e8e\u6307\u5b9a\u67e5\u627e\u65b9\u5411\u3002\u67e5\u627e\u65b9\u5411\u53ef\u4ee5\u662f ios::beg\uff08\u9ed8\u8ba4\u7684\uff0c\u4ece\u6d41\u7684\u5f00\u5934\u5f00\u59cb\u5b9a\u4f4d\uff09\uff0c\u4e5f\u53ef\u4ee5\u662f ios::cur\uff08\u4ece\u6d41\u7684\u5f53\u524d\u4f4d\u7f6e\u5f00\u59cb\u5b9a\u4f4d\uff09\uff0c\u4e5f\u53ef\u4ee5\u662f ios::end\uff08\u4ece\u6d41\u7684\u672b\u5c3e\u5f00\u59cb\u5b9a\u4f4d\uff09\u3002</p> <p>\u6587\u4ef6\u4f4d\u7f6e\u6307\u9488\u662f\u4e00\u4e2a\u6574\u6570\u503c\uff0c\u6307\u5b9a\u4e86\u4ece\u6587\u4ef6\u7684\u8d77\u59cb\u4f4d\u7f6e\u5230\u6307\u9488\u6240\u5728\u4f4d\u7f6e\u7684\u5b57\u8282\u6570\u3002\u4e0b\u9762\u662f\u5173\u4e8e\u5b9a\u4f4d \"get\" \u6587\u4ef6\u4f4d\u7f6e\u6307\u9488\u7684\u5b9e\u4f8b\uff1a</p> <pre><code>// \u5b9a\u4f4d\u5230 fileObject \u7684\u7b2c n \u4e2a\u5b57\u8282\uff08\u5047\u8bbe\u662f ios::beg\uff09\nfileObject.seekg( n );\n// \u628a\u6587\u4ef6\u7684\u8bfb\u6307\u9488\u4ece fileObject \u5f53\u524d\u4f4d\u7f6e\u5411\u540e\u79fb n \u4e2a\u5b57\u8282\nfileObject.seekg( n, ios::cur );\n// \u628a\u6587\u4ef6\u7684\u8bfb\u6307\u9488\u4ece fileObject \u672b\u5c3e\u5f80\u56de\u79fb n \u4e2a\u5b57\u8282\nfileObject.seekg( n, ios::end );\n// \u5b9a\u4f4d\u5230 fileObject \u7684\u672b\u5c3e\nfileObject.seekg( 0, ios::end );\n</code></pre>"},{"location":"OOP/OOP%E5%90%8E%E7%AF%87/#c_1","title":"C++ \u5f02\u5e38\u5904\u7406","text":"<p>\u5f02\u5e38\u662f\u7a0b\u5e8f\u5728\u6267\u884c\u671f\u95f4\u4ea7\u751f\u7684\u95ee\u9898\u3002C++ \u5f02\u5e38\u662f\u6307\u5728\u7a0b\u5e8f\u8fd0\u884c\u65f6\u53d1\u751f\u7684\u7279\u6b8a\u60c5\u51b5\uff0c\u6bd4\u5982\u5c1d\u8bd5\u9664\u4ee5\u96f6\u7684\u64cd\u4f5c\u3002</p> <p>\u5f02\u5e38\u63d0\u4f9b\u4e86\u4e00\u79cd\u8f6c\u79fb\u7a0b\u5e8f\u63a7\u5236\u6743\u7684\u65b9\u5f0f\u3002C++ \u5f02\u5e38\u5904\u7406\u6d89\u53ca\u5230\u4e09\u4e2a\u5173\u952e\u5b57\uff1atry\u3001catch\u3001throw\u3002</p> <ul> <li>throw: \u5f53\u95ee\u9898\u51fa\u73b0\u65f6\uff0c\u7a0b\u5e8f\u4f1a\u629b\u51fa\u4e00\u4e2a\u5f02\u5e38\u3002\u8fd9\u662f\u901a\u8fc7\u4f7f\u7528 throw \u5173\u952e\u5b57\u6765\u5b8c\u6210\u7684\u3002</li> <li>catch: \u5728\u60a8\u60f3\u8981\u5904\u7406\u95ee\u9898\u7684\u5730\u65b9\uff0c\u901a\u8fc7\u5f02\u5e38\u5904\u7406\u7a0b\u5e8f\u6355\u83b7\u5f02\u5e38\u3002catch \u5173\u952e\u5b57\u7528\u4e8e\u6355\u83b7\u5f02\u5e38\u3002</li> <li>try: try \u5757\u4e2d\u7684\u4ee3\u7801\u6807\u8bc6\u5c06\u88ab\u6fc0\u6d3b\u7684\u7279\u5b9a\u5f02\u5e38\u3002\u5b83\u540e\u9762\u901a\u5e38\u8ddf\u7740\u4e00\u4e2a\u6216\u591a\u4e2a catch \u5757\u3002</li> </ul> <p>\u5982\u679c\u6709\u4e00\u4e2a\u5757\u629b\u51fa\u4e00\u4e2a\u5f02\u5e38\uff0c\u6355\u83b7\u5f02\u5e38\u7684\u65b9\u6cd5\u4f1a\u4f7f\u7528 try \u548c catch \u5173\u952e\u5b57\u3002try \u5757\u4e2d\u653e\u7f6e\u53ef\u80fd\u629b\u51fa\u5f02\u5e38\u7684\u4ee3\u7801\uff0ctry \u5757\u4e2d\u7684\u4ee3\u7801\u88ab\u79f0\u4e3a\u4fdd\u62a4\u4ee3\u7801\u3002\u4f7f\u7528 try/catch \u8bed\u53e5\u7684\u8bed\u6cd5\u5982\u4e0b\u6240\u793a\uff1a</p> <pre><code>try\n{\n// \u4fdd\u62a4\u4ee3\u7801\n}catch( ExceptionName e1 )\n{\n// catch \u5757\n}catch( ExceptionName e2 )\n{\n// catch \u5757\n}catch( ExceptionName eN )\n{\n// catch \u5757\n}\n</code></pre> <p>\u5982\u679c try \u5757\u5728\u4e0d\u540c\u7684\u60c5\u5883\u4e0b\u4f1a\u629b\u51fa\u4e0d\u540c\u7684\u5f02\u5e38\uff0c\u8fd9\u4e2a\u65f6\u5019\u53ef\u4ee5\u5c1d\u8bd5\u7f57\u5217\u591a\u4e2a catch \u8bed\u53e5\uff0c\u7528\u4e8e\u6355\u83b7\u4e0d\u540c\u7c7b\u578b\u7684\u5f02\u5e38\u3002</p>"},{"location":"OOP/OOP%E5%90%8E%E7%AF%87/#_8","title":"\u629b\u51fa\u5f02\u5e38","text":"<p>\u60a8\u53ef\u4ee5\u4f7f\u7528 throw \u8bed\u53e5\u5728\u4ee3\u7801\u5757\u4e2d\u7684\u4efb\u4f55\u5730\u65b9\u629b\u51fa\u5f02\u5e38\u3002throw \u8bed\u53e5\u7684\u64cd\u4f5c\u6570\u53ef\u4ee5\u662f\u4efb\u610f\u7684\u8868\u8fbe\u5f0f\uff0c\u8868\u8fbe\u5f0f\u7684\u7ed3\u679c\u7684\u7c7b\u578b\u51b3\u5b9a\u4e86\u629b\u51fa\u7684\u5f02\u5e38\u7684\u7c7b\u578b\u3002</p> <p>\u4ee5\u4e0b\u662f\u5c1d\u8bd5\u9664\u4ee5\u96f6\u65f6\u629b\u51fa\u5f02\u5e38\u7684\u5b9e\u4f8b\uff1a</p> <pre><code>double division(int a, int b)\n{\nif( b == 0 )\n{\nthrow \"Division by zero condition!\";\n}\nreturn (a/b);\n}\n</code></pre>"},{"location":"OOP/OOP%E5%90%8E%E7%AF%87/#_9","title":"\u6355\u83b7\u5f02\u5e38","text":"<p>catch \u5757\u8ddf\u5728 try \u5757\u540e\u9762\uff0c\u7528\u4e8e\u6355\u83b7\u5f02\u5e38\u3002\u60a8\u53ef\u4ee5\u6307\u5b9a\u60f3\u8981\u6355\u6349\u7684\u5f02\u5e38\u7c7b\u578b\uff0c\u8fd9\u662f\u7531 catch \u5173\u952e\u5b57\u540e\u7684\u62ec\u53f7\u5185\u7684\u5f02\u5e38\u58f0\u660e\u51b3\u5b9a\u7684\u3002</p> <pre><code>try\n{\n// \u4fdd\u62a4\u4ee3\u7801\n}catch( ExceptionName e )\n{\n// \u5904\u7406 ExceptionName \u5f02\u5e38\u7684\u4ee3\u7801\n}\n</code></pre> <p>\u4e0a\u9762\u7684\u4ee3\u7801\u4f1a\u6355\u83b7\u4e00\u4e2a\u7c7b\u578b\u4e3a ExceptionName \u7684\u5f02\u5e38\u3002\u5982\u679c\u60a8\u60f3\u8ba9 catch \u5757\u80fd\u591f\u5904\u7406 try \u5757\u629b\u51fa\u7684\u4efb\u4f55\u7c7b\u578b\u7684\u5f02\u5e38\uff0c\u5219\u5fc5\u987b\u5728\u5f02\u5e38\u58f0\u660e\u7684\u62ec\u53f7\u5185\u4f7f\u7528\u7701\u7565\u53f7 ...\uff0c\u5982\u4e0b\u6240\u793a\uff1a</p> <pre><code>try\n{\n// \u4fdd\u62a4\u4ee3\u7801\n}catch(...)\n{\n// \u80fd\u5904\u7406\u4efb\u4f55\u5f02\u5e38\u7684\u4ee3\u7801\n}\n</code></pre> <p>\u4e0b\u9762\u662f\u4e00\u4e2a\u5b9e\u4f8b\uff0c\u629b\u51fa\u4e00\u4e2a\u9664\u4ee5\u96f6\u7684\u5f02\u5e38\uff0c\u5e76\u5728 catch \u5757\u4e2d\u6355\u83b7\u8be5\u5f02\u5e38\u3002</p>"},{"location":"OOP/OOP%E5%90%8E%E7%AF%87/#_10","title":"\u5b9e\u4f8b","text":"<pre><code>#include &lt;iostream&gt;\nusing namespace std;\ndouble division(int a, int b)\n{\nif( b == 0 )\n{\nthrow \"Division by zero condition!\";\n}\nreturn (a/b);\n}\nint main ()\n{\nint x = 50;\nint y = 0;\ndouble z = 0;\ntry {\nz = division(x, y);\ncout &lt;&lt; z &lt;&lt; endl;\n}catch (const char* msg) {\ncerr &lt;&lt; msg &lt;&lt; endl;\n}\nreturn 0;\n}\n</code></pre> <p>\u7531\u4e8e\u6211\u4eec\u629b\u51fa\u4e86\u4e00\u4e2a\u7c7b\u578b\u4e3a const char* \u7684\u5f02\u5e38\uff0c\u56e0\u6b64\uff0c\u5f53\u6355\u83b7\u8be5\u5f02\u5e38\u65f6\uff0c\u6211\u4eec\u5fc5\u987b\u5728 catch \u5757\u4e2d\u4f7f\u7528 const char*\u3002\u5f53\u4e0a\u9762\u7684\u4ee3\u7801\u88ab\u7f16\u8bd1\u548c\u6267\u884c\u65f6\uff0c\u5b83\u4f1a\u4ea7\u751f\u4e0b\u5217\u7ed3\u679c\uff1a</p> <pre><code>Division by zero condition!\n</code></pre>"},{"location":"OOP/OOP%E5%90%8E%E7%AF%87/#c_2","title":"C++ \u6807\u51c6\u7684\u5f02\u5e38","text":"<p>C++ \u63d0\u4f9b\u4e86\u4e00\u7cfb\u5217\u6807\u51c6\u7684\u5f02\u5e38\uff0c\u5b9a\u4e49\u5728  \u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u7a0b\u5e8f\u4e2d\u4f7f\u7528\u8fd9\u4e9b\u6807\u51c6\u7684\u5f02\u5e38\u3002\u5b83\u4eec\u662f\u4ee5\u7236\u5b50\u7c7b\u5c42\u6b21\u7ed3\u6784\u7ec4\u7ec7\u8d77\u6765\u7684\uff0c\u5982\u4e0b\u6240\u793a\uff1a <p></p> <p>\u4e0b\u8868\u662f\u5bf9\u4e0a\u9762\u5c42\u6b21\u7ed3\u6784\u4e2d\u51fa\u73b0\u7684\u6bcf\u4e2a\u5f02\u5e38\u7684\u8bf4\u660e\uff1a</p> \u5f02\u5e38 \u63cf\u8ff0 std::exception \u8be5\u5f02\u5e38\u662f\u6240\u6709\u6807\u51c6 C++ \u5f02\u5e38\u7684\u7236\u7c7b\u3002 std::bad_alloc \u8be5\u5f02\u5e38\u53ef\u4ee5\u901a\u8fc7 new \u629b\u51fa\u3002 std::bad_cast \u8be5\u5f02\u5e38\u53ef\u4ee5\u901a\u8fc7 dynamic_cast \u629b\u51fa\u3002 std::bad_typeid \u8be5\u5f02\u5e38\u53ef\u4ee5\u901a\u8fc7 typeid \u629b\u51fa\u3002 std::bad_exception \u8fd9\u5728\u5904\u7406 C++ \u7a0b\u5e8f\u4e2d\u65e0\u6cd5\u9884\u671f\u7684\u5f02\u5e38\u65f6\u975e\u5e38\u6709\u7528\u3002 std::logic_error \u7406\u8bba\u4e0a\u53ef\u4ee5\u901a\u8fc7\u8bfb\u53d6\u4ee3\u7801\u6765\u68c0\u6d4b\u5230\u7684\u5f02\u5e38\u3002 std::domain_error \u5f53\u4f7f\u7528\u4e86\u4e00\u4e2a\u65e0\u6548\u7684\u6570\u5b66\u57df\u65f6\uff0c\u4f1a\u629b\u51fa\u8be5\u5f02\u5e38\u3002 std::invalid_argument \u5f53\u4f7f\u7528\u4e86\u65e0\u6548\u7684\u53c2\u6570\u65f6\uff0c\u4f1a\u629b\u51fa\u8be5\u5f02\u5e38\u3002 std::length_error \u5f53\u521b\u5efa\u4e86\u592a\u957f\u7684 std::string \u65f6\uff0c\u4f1a\u629b\u51fa\u8be5\u5f02\u5e38\u3002 std::out_of_range \u8be5\u5f02\u5e38\u53ef\u4ee5\u901a\u8fc7\u65b9\u6cd5\u629b\u51fa\uff0c\u4f8b\u5982 std::vector \u548c std::bitset&lt;&gt;::operator\u3002 std::runtime_error \u7406\u8bba\u4e0a\u4e0d\u53ef\u4ee5\u901a\u8fc7\u8bfb\u53d6\u4ee3\u7801\u6765\u68c0\u6d4b\u5230\u7684\u5f02\u5e38\u3002 std::overflow_error \u5f53\u53d1\u751f\u6570\u5b66\u4e0a\u6ea2\u65f6\uff0c\u4f1a\u629b\u51fa\u8be5\u5f02\u5e38\u3002 std::range_error \u5f53\u5c1d\u8bd5\u5b58\u50a8\u8d85\u51fa\u8303\u56f4\u7684\u503c\u65f6\uff0c\u4f1a\u629b\u51fa\u8be5\u5f02\u5e38\u3002 std::underflow_error \u5f53\u53d1\u751f\u6570\u5b66\u4e0b\u6ea2\u65f6\uff0c\u4f1a\u629b\u51fa\u8be5\u5f02\u5e38\u3002"},{"location":"OOP/OOP%E5%90%8E%E7%AF%87/#_11","title":"\u5b9a\u4e49\u65b0\u7684\u5f02\u5e38","text":"<p>\u60a8\u53ef\u4ee5\u901a\u8fc7\u7ee7\u627f\u548c\u91cd\u8f7d exception \u7c7b\u6765\u5b9a\u4e49\u65b0\u7684\u5f02\u5e38\u3002\u4e0b\u9762\u7684\u5b9e\u4f8b\u6f14\u793a\u4e86\u5982\u4f55\u4f7f\u7528 std::exception \u7c7b\u6765\u5b9e\u73b0\u81ea\u5df1\u7684\u5f02\u5e38\uff1a</p>"},{"location":"OOP/OOP%E5%90%8E%E7%AF%87/#_12","title":"\u5b9e\u4f8b","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;exception&gt;\nusing namespace std;\nstruct MyException : public exception\n{\nconst char * what () const throw ()\n{\nreturn \"C++ Exception\";\n}\n};\nint main()\n{\ntry\n{\nthrow MyException();\n}\ncatch(MyException&amp; e)\n{\nstd::cout &lt;&lt; \"MyException caught\" &lt;&lt; std::endl;\nstd::cout &lt;&lt; e.what() &lt;&lt; std::endl;\n}\ncatch(std::exception&amp; e)\n{\n//\u5176\u4ed6\u7684\u9519\u8bef\n}\n}\n</code></pre> <p>\u8fd9\u5c06\u4ea7\u751f\u4ee5\u4e0b\u7ed3\u679c\uff1a</p> <pre><code>MyException caught\nC++ Exception\n</code></pre> <p>\u5728\u8fd9\u91cc\uff0cwhat() \u662f\u5f02\u5e38\u7c7b\u63d0\u4f9b\u7684\u4e00\u4e2a\u516c\u5171\u65b9\u6cd5\uff0c\u5b83\u5df2\u88ab\u6240\u6709\u5b50\u5f02\u5e38\u7c7b\u91cd\u8f7d\u3002\u8fd9\u5c06\u8fd4\u56de\u5f02\u5e38\u4ea7\u751f\u7684\u539f\u56e0\u3002</p> <p>\u5f02\u5e38\u89c4\u8303\u58f0\u660e\uff1a</p> <pre><code>enum ERROR{UnderFlow,OverFlow};\n</code></pre>"},{"location":"OOP/OOP%E5%90%8E%E7%AF%87/#c_3","title":"C++ \u6a21\u677f","text":"<p>\u6a21\u677f\u662f\u6cdb\u578b\u7f16\u7a0b\u7684\u57fa\u7840\uff0c\u6cdb\u578b\u7f16\u7a0b\u5373\u4ee5\u4e00\u79cd\u72ec\u7acb\u4e8e\u4efb\u4f55\u7279\u5b9a\u7c7b\u578b\u7684\u65b9\u5f0f\u7f16\u5199\u4ee3\u7801\u3002</p> <p>\u6a21\u677f\u662f\u521b\u5efa\u6cdb\u578b\u7c7b\u6216\u51fd\u6570\u7684\u84dd\u56fe\u6216\u516c\u5f0f\u3002\u5e93\u5bb9\u5668\uff0c\u6bd4\u5982\u8fed\u4ee3\u5668\u548c\u7b97\u6cd5\uff0c\u90fd\u662f\u6cdb\u578b\u7f16\u7a0b\u7684\u4f8b\u5b50\uff0c\u5b83\u4eec\u90fd\u4f7f\u7528\u4e86\u6a21\u677f\u7684\u6982\u5ff5\u3002</p> <p>\u6bcf\u4e2a\u5bb9\u5668\u90fd\u6709\u4e00\u4e2a\u5355\u4e00\u7684\u5b9a\u4e49\uff0c\u6bd4\u5982 \u5411\u91cf\uff0c\u6211\u4eec\u53ef\u4ee5\u5b9a\u4e49\u8bb8\u591a\u4e0d\u540c\u7c7b\u578b\u7684\u5411\u91cf\uff0c\u6bd4\u5982 vector  \u6216 vector \u3002 <p>\u60a8\u53ef\u4ee5\u4f7f\u7528\u6a21\u677f\u6765\u5b9a\u4e49\u51fd\u6570\u548c\u7c7b\uff0c\u63a5\u4e0b\u6765\u8ba9\u6211\u4eec\u4e00\u8d77\u6765\u770b\u770b\u5982\u4f55\u4f7f\u7528\u3002</p>"},{"location":"OOP/OOP%E5%90%8E%E7%AF%87/#_13","title":"\u51fd\u6570\u6a21\u677f","text":"<p>\u6a21\u677f\u51fd\u6570\u5b9a\u4e49\u7684\u4e00\u822c\u5f62\u5f0f\u5982\u4e0b\u6240\u793a\uff1a</p> <pre><code>template &lt;typename type&gt; ret-type func-name(parameter list) {   // \u51fd\u6570\u7684\u4e3b\u4f53 \n}\n</code></pre> <p>\u5728\u8fd9\u91cc\uff0ctype \u662f\u51fd\u6570\u6240\u4f7f\u7528\u7684\u6570\u636e\u7c7b\u578b\u7684\u5360\u4f4d\u7b26\u540d\u79f0\u3002\u8fd9\u4e2a\u540d\u79f0\u53ef\u4ee5\u5728\u51fd\u6570\u5b9a\u4e49\u4e2d\u4f7f\u7528\u3002</p> <p>\u4e0b\u9762\u662f\u51fd\u6570\u6a21\u677f\u7684\u5b9e\u4f8b\uff0c\u8fd4\u56de\u4e24\u4e2a\u6570\u4e2d\u7684\u6700\u5927\u503c\uff1a</p>"},{"location":"OOP/OOP%E5%90%8E%E7%AF%87/#_14","title":"\u5b9e\u4f8b","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\nusing namespace std;\ntemplate &lt;typename T&gt;\ninline T const&amp; Max (T const&amp; a, T const&amp; b) { return a &lt; b ? b:a; } int main ()\n{\nint i = 39;\nint j = 20;\ncout &lt;&lt; \"Max(i, j): \" &lt;&lt; Max(i, j) &lt;&lt; endl; double f1 = 13.5; double f2 = 20.7; cout &lt;&lt; \"Max(f1, f2): \" &lt;&lt; Max(f1, f2) &lt;&lt; endl; string s1 = \"Hello\"; string s2 = \"World\"; cout &lt;&lt; \"Max(s1, s2): \" &lt;&lt; Max(s1, s2) &lt;&lt; endl; return 0;\n}\n</code></pre> <p>\u5f53\u4e0a\u9762\u7684\u4ee3\u7801\u88ab\u7f16\u8bd1\u548c\u6267\u884c\u65f6\uff0c\u5b83\u4f1a\u4ea7\u751f\u4e0b\u5217\u7ed3\u679c\uff1a</p> <pre><code>Max(i, j): 39\nMax(f1, f2): 20.7\nMax(s1, s2): World\n</code></pre>"},{"location":"OOP/OOP%E5%90%8E%E7%AF%87/#_15","title":"\u7c7b\u6a21\u677f","text":"<p>\u6b63\u5982\u6211\u4eec\u5b9a\u4e49\u51fd\u6570\u6a21\u677f\u4e00\u6837\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u5b9a\u4e49\u7c7b\u6a21\u677f\u3002\u6cdb\u578b\u7c7b\u58f0\u660e\u7684\u4e00\u822c\u5f62\u5f0f\u5982\u4e0b\u6240\u793a\uff1a</p> <pre><code>template &lt;class type&gt; class class-name {\n.\n.\n.\n}\n</code></pre> <p>\u5728\u8fd9\u91cc\uff0ctype \u662f\u5360\u4f4d\u7b26\u7c7b\u578b\u540d\u79f0\uff0c\u53ef\u4ee5\u5728\u7c7b\u88ab\u5b9e\u4f8b\u5316\u7684\u65f6\u5019\u8fdb\u884c\u6307\u5b9a\u3002\u60a8\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a\u9017\u53f7\u5206\u9694\u7684\u5217\u8868\u6765\u5b9a\u4e49\u591a\u4e2a\u6cdb\u578b\u6570\u636e\u7c7b\u578b\u3002</p> <p>\u4e0b\u9762\u7684\u5b9e\u4f8b\u5b9a\u4e49\u4e86\u7c7b Stack&lt;&gt;\uff0c\u5e76\u5b9e\u73b0\u4e86\u6cdb\u578b\u65b9\u6cd5\u6765\u5bf9\u5143\u7d20\u8fdb\u884c\u5165\u6808\u51fa\u6808\u64cd\u4f5c\uff1a</p>"},{"location":"OOP/OOP%E5%90%8E%E7%AF%87/#_16","title":"\u5b9e\u4f8b","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\n#include &lt;cstdlib&gt;\n#include &lt;string&gt;\n#include &lt;stdexcept&gt;\nusing namespace std;\ntemplate &lt;class T&gt;\nclass Stack { private: vector&lt;T&gt; elems;     // \u5143\u7d20 \npublic: void push(T const&amp;);  // \u5165\u6808\nvoid pop();               // \u51fa\u6808\nT top() const;            // \u8fd4\u56de\u6808\u9876\u5143\u7d20\nbool empty() const{       // \u5982\u679c\u4e3a\u7a7a\u5219\u8fd4\u56de\u771f\u3002\nreturn elems.empty(); } }; template &lt;class T&gt;\nvoid Stack&lt;T&gt;::push (T const&amp; elem) { // \u8ffd\u52a0\u4f20\u5165\u5143\u7d20\u7684\u526f\u672c\nelems.push_back(elem);    } template &lt;class T&gt;\nvoid Stack&lt;T&gt;::pop () { if (elems.empty()) { throw out_of_range(\"Stack&lt;&gt;::pop(): empty stack\"); }\n// \u5220\u9664\u6700\u540e\u4e00\u4e2a\u5143\u7d20\nelems.pop_back();         } template &lt;class T&gt;\nT Stack&lt;T&gt;::top () const { if (elems.empty()) { throw out_of_range(\"Stack&lt;&gt;::top(): empty stack\"); }\n// \u8fd4\u56de\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684\u526f\u672c \nreturn elems.back();      } int main() { try { Stack&lt;int&gt;         intStack;  // int \u7c7b\u578b\u7684\u6808 \nStack&lt;string&gt; stringStack;    // string \u7c7b\u578b\u7684\u6808 \n// \u64cd\u4f5c int \u7c7b\u578b\u7684\u6808 \nintStack.push(7); cout &lt;&lt; intStack.top() &lt;&lt;endl; // \u64cd\u4f5c string \u7c7b\u578b\u7684\u6808 \nstringStack.push(\"hello\"); cout &lt;&lt; stringStack.top() &lt;&lt; std::endl; stringStack.pop(); stringStack.pop(); } catch (exception const&amp; ex) { cerr &lt;&lt; \"Exception: \" &lt;&lt; ex.what() &lt;&lt;endl; return -1;\n} }\n</code></pre> <p>\u5f53\u4e0a\u9762\u7684\u4ee3\u7801\u88ab\u7f16\u8bd1\u548c\u6267\u884c\u65f6\uff0c\u5b83\u4f1a\u4ea7\u751f\u4e0b\u5217\u7ed3\u679c\uff1a</p> <pre><code>7\nhello\nException: Stack&lt;&gt;::pop(): empty stack\n</code></pre>"}]}